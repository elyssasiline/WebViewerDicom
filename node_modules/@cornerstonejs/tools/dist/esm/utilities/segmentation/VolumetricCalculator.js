import { BasicStatsCalculator } from '../math/basic';
const TEST_MAX_LOCATIONS = 10;
export default class VolumetricCalculator extends BasicStatsCalculator {
    static { this.maxIJKs = []; }
    static getStatistics(options) {
        const { spacing } = options;
        const stats = BasicStatsCalculator.getStatistics();
        const volumeUnit = spacing ? 'mm\xb3' : 'voxels\xb3';
        const volumeScale = spacing
            ? spacing[0] * spacing[1] * spacing[2] * 1000
            : 1;
        stats.volume = {
            value: Array.isArray(stats.count.value)
                ? stats.count.value.map((v) => v * volumeScale)
                : stats.count.value * volumeScale,
            unit: volumeUnit,
            name: 'volume',
        };
        stats.maxIJKs = this.maxIJKs;
        stats.array.push(stats.volume);
        this.maxIJKs = [];
        return stats;
    }
    static statsCallback(data) {
        BasicStatsCalculator.statsCallback(data);
        const { value } = data;
        const { maxIJKs } = this;
        const { length } = maxIJKs;
        if (typeof value !== 'number' ||
            (length >= TEST_MAX_LOCATIONS && value < maxIJKs[0].value)) {
            return;
        }
        if (!length || value >= maxIJKs[length - 1].value) {
            maxIJKs.push(data);
        }
        else {
            for (let i = 0; i < length; i++) {
                if (value <= maxIJKs[i].value) {
                    maxIJKs.splice(i, 0, data);
                    break;
                }
            }
        }
        if (length >= TEST_MAX_LOCATIONS) {
            maxIJKs.splice(0, 1);
        }
    }
}
