import type { ContourSegmentationData } from './types';
import type { Types } from '@cornerstonejs/core';
import type { LabelmapSegmentationData } from './types/LabelmapTypes';
import type { SurfaceSegmentationData } from './types/SurfaceTypes';
import type SegmentationRepresentations from './enums/SegmentationRepresentations';
export type PolySegConversionOptions = {
    segmentIndices?: number[];
    segmentationId?: string;
    viewport?: Types.IStackViewport | Types.IVolumeViewport;
};
type ComputeRepresentationFn<T> = (segmentationId: string, options: PolySegConversionOptions) => Promise<T>;
type PolySegAddOn = {
    canComputeRequestedRepresentation: (segmentationId: string, representationType: SegmentationRepresentations) => boolean;
    init: () => void;
    computeContourData: ComputeRepresentationFn<ContourSegmentationData>;
    computeLabelmapData: ComputeRepresentationFn<LabelmapSegmentationData>;
    computeSurfaceData: ComputeRepresentationFn<SurfaceSegmentationData>;
    updateSurfaceData: ComputeRepresentationFn<SurfaceSegmentationData>;
};
type AddOns = {
    polySeg: PolySegAddOn;
};
export type Config = {
    addons: AddOns;
};
export declare function getConfig(): Config;
export declare function setConfig(newConfig: Config): void;
export declare function getAddOns(): AddOns;
export declare function getPolySeg(): PolySegAddOn;
export {};
