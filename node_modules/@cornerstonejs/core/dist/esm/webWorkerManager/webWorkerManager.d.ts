export default CentralizedWorkerManager;
declare class CentralizedWorkerManager {
    workerRegistry: {};
    workerPoolManager: RequestPoolManager;
    registerWorker(workerName: any, workerFn: any, options?: {
        maxWorkerInstances?: number;
        overwrite?: boolean;
        autoTerminateOnIdle?: {
            enabled?: boolean;
            idleTimeThreshold?: number;
        };
    }): void;
    getNextWorkerAPI(workerName: any): {
        api: any;
        index: number;
    };
    executeTask(workerName: string, methodName: string, args?: object, { requestType, priority, options, callbacks, }?: {
        requestType?: RequestType;
        priority?: number;
        options?: object;
        callbacks?: Function[];
    }): Promise<any>;
    terminateIdleWorkers(workerName: any, idleTimeThreshold: any): void;
    terminate(workerName: any): void;
    terminateWorkerInstance(workerName: any, index: any): void;
}
import { RequestPoolManager } from '../requestPool/requestPoolManager';
import { RequestType } from '../enums/';
