export class HistoryMemo {
    constructor(label = 'Tools', size = 50) {
        this.position = -1;
        this.redoAvailable = 0;
        this.undoAvailable = 0;
        this.ring = new Array();
        this.label = label;
        this._size = size;
    }
    get size() {
        return this._size;
    }
    set size(newSize) {
        this.ring = new Array(newSize);
        this._size = newSize;
        this.position = -1;
        this.redoAvailable = 0;
        this.undoAvailable = 0;
    }
    undo(items = 1) {
        while (items > 0 && this.undoAvailable > 0) {
            const item = this.ring[this.position];
            item.restoreMemo(true);
            items--;
            this.redoAvailable++;
            this.undoAvailable--;
            this.position = (this.position - 1 + this.size) % this.size;
        }
    }
    redo(items = 1) {
        while (items > 0 && this.redoAvailable > 0) {
            const newPosition = (this.position + 1) % this.size;
            const item = this.ring[newPosition];
            item.restoreMemo(false);
            items--;
            this.position = newPosition;
            this.undoAvailable++;
            this.redoAvailable--;
        }
    }
    push(item) {
        if (!item) {
            return;
        }
        const memo = item.restoreMemo
            ? item
            : item.createMemo?.();
        if (!memo) {
            return;
        }
        this.redoAvailable = 0;
        if (this.undoAvailable < this._size) {
            this.undoAvailable++;
        }
        this.position = (this.position + 1) % this._size;
        this.ring[this.position] = memo;
        return memo;
    }
}
const DefaultHistoryMemo = new HistoryMemo();
export { DefaultHistoryMemo };
